layout(legend = list(x = -.2, y = 1.0))
df_type %>% plot_ly(x=~three_pointers_made, y = ~two_pointers_made, color = ~player_name, type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
plot_ly(data = df_defender, y = ~three_pointers_made, color = ~player_name, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
View(df_type)
colnames(df_type)
1] "player_name"           "three_pointers_made"   "player_name"           "three_pointers_missed" "player_name"           "three_pointers_missed"
df_defender[c('CLOSEST_DEFENDER ','CLOSEST_DEFENDER ') <- c('Best Defender','Worst Defender')
df_defender
plot_ly(data = df_defender, y = ~defense, color = ~best.defender, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
df_type %>% plot_ly(x=~three_pointers_made, y = ~three_pointers_missed, color = ~player_name, type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
plot_ly(data = df_defender, y = ~three_pointers_made, color = ~player_name, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
View(df_type)
colnames(df_type)
1] "player_name"           "three_pointers_made"   "player_name"           "three_pointers_missed" "player_name"           "three_pointers_missed"
df_defender[c('CLOSEST_DEFENDER ','CLOSEST_DEFENDER ') <- c('Best Defender','Worst Defender')
df_defender
plot_ly(data = df_defender, y = ~defense, color = ~best.defender, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
colnames*shotlog)
shotlog %>% plot_ly(x=~player_name, y = ~, color = ~player_name, type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
plot_ly(data = df_defender, y = ~three_pointers_made, color = ~player_name, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
View(df_type)
colnames(df_type)
1] "player_name"           "three_pointers_made"   "player_name"           "three_pointers_missed" "player_name"           "three_pointers_missed"
colnames*shotlog)
colnames(shotlog)
shotlog %>% plot_ly(x=~player_name, y = ~SHOT_RESULT, color = ~PTS_TYPE, type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT, color = ~player_name, type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
df_defender[c('CLOSEST_DEFENDER ','CLOSEST_DEFENDER ') <- c('Best Defender','Worst Defender')
df_defender
plot_ly(data = df_defender, y = ~defense, color = ~best.defender, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
colnames(shotlog)
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT, color = ~player_name, type = "box") %>%
layout(legend = list(x = -.2, y = 1.0))
plot_ly(data = df_defender, y = ~three_pointers_made, color = ~player_name, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
View(df_type)
colnames(df_type)
1] "player_name"           "three_pointers_made"   "player_name"           "three_pointers_missed" "player_name"           "three_pointers_missed"
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT, color = ~player_name, type = "box") %>%
layout(legend = list(x = -.2, y = 1.0))
df_defender[c('CLOSEST_DEFENDER ','CLOSEST_DEFENDER ') <- c('Best Defender','Worst Defender')
df_defender
plot_ly(data = df_defender, y = ~defense, color = ~best.defender, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
colnames(shotlog)
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT,type = "box") %>%
layout(legend = list(x = -.2, y = 1.0))
plot_ly(data = df_defender, y = ~three_pointers_made, color = ~player_name, type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
View(df_type)
colnames(df_type)
1] "player_name"           "three_pointers_made"   "player_name"           "three_pointers_missed" "player_name"           "three_pointers_missed"
top.threes.made
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT,type = "scatter") %>%
layout(legend = list(x = -.2, y = 1.0))
shotlog %>% plot_ly(x=~PTS_TYPE, y = ~SHOT_RESULT,type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
shotlog %>% plot_ly(x=~SHOT_RESULT, y = ~PTS_TYPE,type = "bar") %>%
layout(legend = list(x = -.2, y = 1.0))
runApp()
runApp()
runApp()
runApp('~/OneDrive/Desktop/R/Projects/Shiny_New')
runApp('~/OneDrive/Desktop/TEST/shiny_test_new/shot_analyzer')
runApp()
g3 <-
ggplot(shotmvm, aes(x = Shot_Result, y = Shot_Pct)) + facet_grid(. ~ Location) +
ggtitle(paste(
"%Shots Made vs. Missed by ",
toupper(unique(input$player)),
"\n Home vs Away Games" ,
sep = ""
)) +
geom_bar(stat = "identity",
fill = "blue",
alpha = 0.8) +
xlab("Made vs. Missed") + ylab("% Shots")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shotlog %>%
filter(player_name == 'lebron james')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
runApp()
runApp()
runApp()
output$chart4 <- renderPlot({
# generate data
shottype <- shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
shottype <- as.data.frame(shottype)
shottype <- data.frame(shottype,Value = TRUE)
shottype <- reshape(shottype, idvar = c("player_name","CLOSEST_DEFENDER"),
timevar = "SHOT_RESULT", direction = "wide")
shottype <- shottype[,c(1,2,3,5)]
colnames(shottype) <- c("Player Name", "Defender","Shots Made", "Shots Missed")
three <- shottype %>%
arrange(desc(`Shots Missed`))
three <- three[1:10,]
two <- shottype %>%
arrange(desc(`Shots Made`))
two <- two[1:10,]
g4 <- ggplot(three, aes(reorder(Defender,-`Shots Missed`), `Shots Missed`)) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Top Defender") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Best Defenders Guarding ")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
g5 <- ggplot(two, aes(reorder(Defender,-`Shots Made`), `Shots Made`)) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Defender") +
ylab("# Shots Made") +  ylim(0,20) +
ggtitle(paste("Worst Defender")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(g4,g5, ncol=2)
runApp()
runApp()
runApp()
runApp()
shottype
# generate data
shottype <- shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
runApp()
three <- shottype %>%
arrange(desc(`Shots Missed`))
shottype %>%
arrange(desc(count(`Shots Made`)))
shotlog %>%
arrange(desc(count(`Shots Made`)))
shotlog %>% group_by(player_name) %>% unique() %>% filter(.,PTS_TYPE == 2,SHOT_RESULT == 'made') %>% summarise(., two_pointers_made = n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shottype <- shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
shottype <- as.data.frame(shottype)
shottype <- data.frame(shottype,Value = TRUE)
shottype <- reshape(shottype, idvar = c("player_name","Type"),
timevar = "SHOT_RESULT", direction = "wide")
shottype <- shottype[,c(1,2,3,5)]
colnames(shottype) <- c("Player Name", "Type","Made", "Missed")
three <- shottype %>% filter('Type' == 3) %>%
arrange(desc('Made'))
three <- three[1:10,]
runApp()
runApp()
runApp()
runApp()
shotlog %>% filter(PERIOD == 1, SHOT_DIST > 5) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST, na.rm = T),2),
ave_touch = round(mean(TOUCH_TIME, na.rm = T),2),
ave_dribble = round(mean(DRIBBLES, na.rm = T),2),
ave_shot_clock = round(mean(SHOT_CLOCK, na.rm = T),2),
ave_distance = round(mean(SHOT_DIST, na.rm = T),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>% filter(total_attempts > 150)
best_1st <- data.frame(first_q)
datatable(best_1st[1:20,])
first_q <- shotlog %>% filter(PERIOD == 1, SHOT_DIST > 5) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST, na.rm = T),2),
ave_touch = round(mean(TOUCH_TIME, na.rm = T),2),
ave_dribble = round(mean(DRIBBLES, na.rm = T),2),
ave_shot_clock = round(mean(SHOT_CLOCK, na.rm = T),2),
ave_distance = round(mean(SHOT_DIST, na.rm = T),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>% filter(total_attempts > 150)
best_1st <- data.frame(first_q)
datatable(best_1st[1:20,])
shotlogs %>% group_by(LOCATION) %>% summarize(PERCENTAGE = (sum(FGM)/length(FGM))*100)
shotlogs %>% group_by(LOCATION) %>% summarize(PERCENTAGE = (sum(FGM)/length(FGM))*100)
ggplot(data = home_away, aes(x = LOCATION, y = PERCENTAGE, fill = LOCATION, width = 0.65)) + geom_bar(stat = 'identity') + theme_bw()
install.packages('DT')
library(DT)
first_q <- shotlog %>% filter(PERIOD == 1, SHOT_DIST > 5) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST, na.rm = T),2),
ave_touch = round(mean(TOUCH_TIME, na.rm = T),2),
ave_dribble = round(mean(DRIBBLES, na.rm = T),2),
ave_shot_clock = round(mean(SHOT_CLOCK, na.rm = T),2),
ave_distance = round(mean(SHOT_DIST, na.rm = T),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>% filter(total_attempts > 150)
best_1st <- data.frame(first_q)
datatable(best_1st[1:20,])
fourth_q <- shotlog %>% filter(PERIOD == 4, SHOT_DIST > 5) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST, na.rm = T),2),
ave_touch = round(mean(TOUCH_TIME, na.rm = T),2),
ave_dribble = round(mean(DRIBBLES, na.rm = T),2),
ave_shot_clock = round(mean(SHOT_CLOCK, na.rm = T),2),
ave_distance = round(mean(SHOT_DIST, na.rm = T),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>%
filter(total_attempts > 150)
best_4th <- data.frame(fourth_q)
datatable(best_4th[1:20,])
#Top End Game Players
isna <- which(is.na(nba_shots$SHOT_CLOCK))
GAME_CLOCK <- strptime(end_game$GAME_CLOCK, format = '%M:%S')
clock <- GAME_CLOCK$min * 60 + GAME_CLOCK$sec
end_game$GAME_CLOCK <- clock
end_game$SHOT_CLOCK[is.na(end_game$SHOT_CLOCK)] <- end_game$GAME_CLOCK[isna]
end <- end_game %>% filter(PERIOD >= 4, GAME_CLOCK <= 300) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST),2),
ave_touch = round(mean(TOUCH_TIME),2),
ave_dribble = round(mean(DRIBBLES),2),
ave_shot_clock = round(mean(SHOT_CLOCK),2),
ave_distance = round(mean(SHOT_DIST),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>%
filter(total_attempts > 100)
best_end <- data.frame(end)
datatable(best_end[1:20,])
isna <- which(is.na(shotlog$SHOT_CLOCK))
GAME_CLOCK <- strptime(end_game$GAME_CLOCK, format = '%M:%S')
clock <- GAME_CLOCK$min * 60 + GAME_CLOCK$sec
end_game$GAME_CLOCK <- clock
end_game$SHOT_CLOCK[is.na(end_game$SHOT_CLOCK)] <- end_game$GAME_CLOCK[isna]
end <- end_game %>% filter(PERIOD >= 4, GAME_CLOCK <= 300) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST),2),
ave_touch = round(mean(TOUCH_TIME),2),
ave_dribble = round(mean(DRIBBLES),2),
ave_shot_clock = round(mean(SHOT_CLOCK),2),
ave_distance = round(mean(SHOT_DIST),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>%
filter(total_attempts > 100)
best_end <- data.frame(end)
datatable(best_end[1:20,])
isna <- which(is.na(shotlog$SHOT_CLOCK))
GAME_CLOCK <- strptime(end_game$GAME_CLOCK, format = '%M:%S')
clock <- GAME_CLOCK$min * 60 + GAME_CLOCK$sec
end_game$GAME_CLOCK <- clock
end_game$SHOT_CLOCK[is.na(end_game$SHOT_CLOCK)] <- end_game$GAME_CLOCK[isna]
end <- end_game %>% filter(PERIOD >= 4, GAME_CLOCK <= 300) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST),2),
ave_touch = round(mean(TOUCH_TIME),2),
ave_dribble = round(mean(DRIBBLES),2),
ave_shot_clock = round(mean(SHOT_CLOCK),2),
ave_distance = round(mean(SHOT_DIST),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>%
filter(total_attempts > 100)
best_end <- data.frame(end)
datatable(best_end[1:20,])
runApp()
runApp()
runApp()
best_4th
best_4th
DT::datatable(best_4th, options = list(pageLength = 15), rownames = FALSE)
output$datatab3
output$datatab3 <- DT::renderDataTable({
## Fourth Quarter Top Shooters
fourth_q <- shotlog %>% filter(PERIOD == 4, SHOT_DIST > 5) %>% group_by(player_name) %>%
summarise(made = sum(FGM),
total_attempts = length(FGM),
ave_defense_dist = round(mean(CLOSE_DEF_DIST, na.rm = T),2),
ave_touch = round(mean(TOUCH_TIME, na.rm = T),2),
ave_dribble = round(mean(DRIBBLES, na.rm = T),2),
ave_shot_clock = round(mean(SHOT_CLOCK, na.rm = T),2),
ave_distance = round(mean(SHOT_DIST, na.rm = T),2)) %>%
mutate(percentage = round(made/total_attempts,2)) %>%
arrange(desc(percentage)) %>%
filter(total_attempts > 150)
best_4th <- data.frame(fourth_q)
datatable(best_4th[1:20,])
DT::datatable(best_4th, options = list(pageLength = 15), rownames = FALSE)
})
runApp()
runApp()
runApp()
runApp()
runApp()
shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
runApp()
?reorder
?reorder
runApp()
runApp()
levels(shot.dist$distrange)
levels(shotlog$SHOT_DIST)
shotlog %>%
filter(player_name == 'aaron brooks')
aaronbrooks.dist <- shotlog %>%
filter(player_name == 'aaron brooks')
aaronbrooks.dist <- as.data.frame(aaronbrooks.dist)
aaronbrooks.dist
aaronbrooks.dist$distrange <- cut(aaronbrooks.dist$SHOT_DIST, c(0,5,10,15,20,25,30,50))
aaronbrooks.dist$distrange
?cut
levels(shot.dist$distrange) <- c("Less than 5Ft","5-9Ft","10-14Ft","15-19Ft","20-24Ft","25-29Ft","30Ft+")
levels(aaronbrooks.dist$distrange$distrange) <- c("Less than 5Ft","5-9Ft","10-14Ft","15-19Ft","20-24Ft","25-29Ft","30Ft+")
levels(aaronbrooks.dist$distrange) <- c("Less than 5Ft","5-9Ft","10-14Ft","15-19Ft","20-24Ft","25-29Ft","30Ft+")
levels(aaronbrooks.dist$distrange)
?levels
z <- gl(3, 2, 12, labels = c("apple", "salad", "orange"))
z
levels(z) <- c("fruit", "veg", "fruit")
z
z <- gl(3, 2, 12, labels = c("apple", "salad", "orange"))
z
levels(z) <- c("fruit", "veg", "fruit")
z
aaronbrooks.dist <- aaronbrooks.dist[,c(2:4,6:8,10:14,18,20,22)]
aaronbrooks.dist
aaronbrooks.dist <- shotlog %>%
filter(player_name == 'aaron brooks')
aaronbrooks.dist
aaronbrooks.dist <- as.data.frame(aaronbrooks.dist)
aaronbrooks.dist$distrange <- cut(aaronbrooks.dist$SHOT_DIST, c(0,5,10,15,20,25,30,50))
aaronbrooks.dist
levels(aaronbrooks.dist$distrange) <- c("Less than 5Ft","5-9Ft","10-14Ft","15-19Ft","20-24Ft","25-29Ft","30Ft+")
aaronbrooks.dist
aaronbrooks.dist <- aaronbrooks.dist[,c(2:4,6:8,10:14,18,20,22)]
aaronbrooks.dist
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_type)
View(df_type)
ggplot(three, aes(reorder('Pts Type',-'Missed'), 'Missed')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Three Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
three <- shottype %>% filter('Type' == 3) %>%
arrange(desc('Made'))
three <- three[1:10,]
two <- shottype %>% filter('Type' == 2) %>%
arrange(desc('Made'))
two <- two[1:10,]
g4 <- ggplot(three, aes(reorder('Pts Type',-'Missed'), 'Missed')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Three Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
shottype <- shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
shottype <- as.data.frame(shottype)
shottype <- data.frame(shottype,Value = TRUE)
shottype <- reshape(shottype, idvar = c("player_name","Type"),
timevar = "SHOT_RESULT", direction = "wide")
shottype <- shottype[,c(1,2,3,5)]
colnames(shottype) <- c("Player Name", "Type","Made", "Missed")
three <- shottype %>% filter('Type' == 3) %>%
arrange(desc('Made'))
three <- three[1:10,]
two <- shottype %>% filter('Type' == 2) %>%
arrange(desc('Made'))
two <- two[1:10,]
g4 <- ggplot(three, aes(reorder('Pts Type',-'Missed'), 'Missed')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Three Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
g5 <- ggplot(two, aes(reorder('Type',-'Made'), 'Made')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Made") +  ylim(0,20) +
ggtitle(paste("Two Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(g4,g5, ncol=2)
g4 <- ggplot(three, aes(reorder('Pts Type',-'Missed'), 'Missed')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Three Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
shottype <- shotlog %>%
filter(player_name == input$player)%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
shottype <- as.data.frame(shottype)
shottype <- data.frame(shottype,Value = TRUE)
shottype <- reshape(shottype, idvar = c("player_name","Type"),
timevar = "SHOT_RESULT", direction = "wide")
shottype <- shottype[,c(1,2,3,5)]
colnames(shottype) <- c("Player Name", "Type","Made", "Missed")
three <- shottype %>% filter('Type' == 3) %>%
arrange(desc('Made'))
three <- three[1:10,]
two <- shottype %>% filter('Type' == 2) %>%
arrange(desc('Made'))
two <- two[1:10,]
g4 <- ggplot(three, aes(reorder('Pts Type',-'Missed'), 'Missed')) +
geom_bar(stat = "identity", fill = "blue", alpha=0.8) +
xlab("Shot Type") +
ylab("# Shots Missed") + ylim(0,20) +
ggtitle(paste("Three Pointers")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
three <- shottype %>% filter('Type' == 3) %>%
arrange(desc('Made'))
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n())
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>% filter(PTS_TYPE == 3)
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
shotlog$Count
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
mutate(fg = (shotlog$SHOT_RESULT == 'made')/(shotlog$SHOT_RESULT == 'missed'))
shotlog[shotlog$SHOT_RESULT == 'made']/shotlog[shotlog$SHOT_RESULT == 'missed']
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
mutate(fg = (shotlog$SHOT_RESULT == 'made')/(shotlog$SHOT_RESULT == 'missed'))
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3)
top.100.made
shotlog %>%
filter(player_name == 'aaron brooks')%>%
group_by(player_name, PTS_TYPE, SHOT_RESULT) %>%
summarize(Count = n()) %>%
filter(PTS_TYPE == 3) %>%
(sum(shotlog[,4]/(shotlog[,4]+shotlog[,4])/100))
shotlog[,4]
shotlog
top.100.made[,2]
runApp()
runApp()
